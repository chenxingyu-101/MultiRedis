网络框架需要考虑的：
1、编解码(包括tcp粘包问题)：消息到byte，byte到数据（即定制协议）
由于tcp的传输是流的方式，再加上网络的不可靠性（丢包重传等），因此对于一个应用来讲，有粘包拆包问题

2、SOCKET连接（各种连接状态）管理；心跳机制（维持长连接/检活）；
网络连接的创建相对成本较高，因此复用的必要性大大提升，就需要管理这些复用的对象

3、TCP参数设置；
不同的应用，场景有所不同，因此，调整TCP参数可以优化使用

4、请求/响应处理；
应用层定时器用于决定哪个请求超时，然后搭配一些后续的处理策略（比如延时重试等）
5、异步请求管理：
支持异步调用，需要缓存请求，当网络IO有可读数据包时，判断是否是响应的；
支持同步调用：在超时内，监听网卡IO是否有可读数据，超时后，响应失败，上层可以重试等；

1、编解码处理粘包半包：不是很需要吧？client 的get肯定要设置成阻塞式的。write设置成非阻塞，可能会导致粘包哦
    get多少，write多少，我需要去看看redis
2、心跳机制得专门看一看。
3、不去管
4、请求超时由客户端处理，就失败了呗
5、这好像也不用管。

这样一来，我先把多线程得reactor写好，设计好命令与数据结构，应该就能成了。再搭配上无锁并发，应该可以。

2021/3/11:支持 key-value 都是String,GC压力过大,继承和多态用不起来,ConcurrentHashMap似乎不满足我的遇锁放弃的思路。